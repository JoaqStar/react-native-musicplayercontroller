0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/Cellar/node/6.8.0/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.10.8
3 info using node@v6.8.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/Developer/Desktop/My_GithubProjects/react-native-musicplayercontroller',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/Developer/.npm/react-native-musicplayercontroller/1.0.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/Developer/.npm correctMkdir not in flight; initializing
10 info lifecycle react-native-musicplayercontroller@1.0.0~prepublish: react-native-musicplayercontroller@1.0.0
11 silly lifecycle react-native-musicplayercontroller@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/Developer/.npm/react-native-musicplayercontroller/1.0.0/package.tgz',
12 verbose tar pack   '/Users/Developer/Desktop/My_GithubProjects/react-native-musicplayercontroller' ]
13 verbose tarball /Users/Developer/.npm/react-native-musicplayercontroller/1.0.0/package.tgz
14 verbose folder /Users/Developer/Desktop/My_GithubProjects/react-native-musicplayercontroller
15 verbose addLocalTarball adding from inside cache /Users/Developer/.npm/react-native-musicplayercontroller/1.0.0/package.tgz
16 verbose correctMkdir /Users/Developer/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd react-native-musicplayercontroller@1.0.0
18 verbose afterAdd /Users/Developer/.npm/react-native-musicplayercontroller/1.0.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/Developer/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/Developer/.npm/react-native-musicplayercontroller/1.0.0/package/package.json written
21 silly publish { name: 'react-native-musicplayercontroller',
21 silly publish   version: '1.0.0',
21 silly publish   description: 'Class to modally display MPMediaPickerViewController and play music from a user\'s device using MPMusicPlayerController (iOS), and its Android/Web equivilents',
21 silly publish   main: 'index',
21 silly publish   scripts: { test: 'echo test' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/KjellConnelly/react-native-musicplayercontroller.git' },
21 silly publish   keywords:
21 silly publish    [ 'react-native',
21 silly publish      'component',
21 silly publish      'react',
21 silly publish      'web',
21 silly publish      'react-native-for-web',
21 silly publish      'mpmusicplayercontroller',
21 silly publish      'music',
21 silly publish      'player',
21 silly publish      'audio' ],
21 silly publish   author: { name: 'Kjell Connelly' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/KjellConnelly/react-native-musicplayercontroller/issues' },
21 silly publish   homepage: 'https://github.com/KjellConnelly/react-native-musicplayercontroller#readme',
21 silly publish   readme: '# react-native-musicplayercontroller\r\n\r\nThis module is being created so React-Native (and React-Native for Web) users can easily ask their users to select a song from their Library, and have some playback options, even between sessions. iOS will access their Music Library for songs/playlists that are currently on their device (not in the Cloud) using ```MPMediaPickerController```, and playback will be with ```[MPMusicPlayerController applicationMusicPlayer]``` This is the basis for the other Android and Web versions which I tried to mimic as closely as possible.\r\n\r\n\r\n## Current State\r\nInitial versions for iOS, Android, and Web have been completed. After a few days of fully integrating and testing on my own current app, I\'ll bump this to version 1.0.0. Note that the API for all is the same, though the functionality may differ slightly. Check out more of this readme for more details on differences. \r\n\r\n## Installation\r\n\r\n```\r\nnpm install --save react-native-musicplayercontroller\r\nreact-native link\r\n```\r\n\r\nIf your Xcode project has more than one Target, you will need to navigate to ```Libraries > RNReactNativeMusicplayercontroller.xcodeproj > Products > libRNReactNativeMusicplayercontroller.a``` and drag this into each Target\'s ```Build Phases > Link Binary with Libraries```. There should already be a few .a files in there, so it\'s pretty obvious. react-native link only links to the first Target.\r\n\r\nFor iOS apps, make sure you add NSAppleMusicUsageDescription to your info.plist. Check out the Common Debugging Issues near the bottom for a description of how this works.\r\n\r\n## Usage\r\n```javascript\r\nimport MusicPlayerController from \'react-native-musicplayercontroller\'\r\n```\r\n A) Users must pick a song/playlist from their device at least once before they can play audio from within your app. Without user selection, we have no access to their music library.\r\n\r\nWe\'ll save the memory of this track for you between app usage. It will be saved to ```NSUserDefaults``` (iOS), ```SharedPreferences``` (android), and possibly ```Local Storage``` (web), and thus will be erased when they delete the app. Or it will be overwritten when they choose a new track/playlist. Currently, this code only allows for one song/playlist to be saved between users picking them.\r\n\r\nHere\'s how to present the Music Picker modally (android users, please use requestPermission method first):\r\n```javascript\r\nMusicPlayerController.presentPicker(false, (metadata)=>{\r\n  // Successfully saved MPMediaItemCollection to NSUserDefaults.\r\n  //    Returns an array of metadata for each track (not all MPMediaItem\r\n  //    fields are copied, only the blantantly needed ones)\r\n    alert(metadata[0]["title"])\r\n}, ()=>{\r\n  // Opened, but user tapped Cancel\r\n  alert("Cancel")\r\n})\r\n```\r\n\r\n###### MPMediaPickerController - iOS\r\n![alt text](https://raw.githubusercontent.com/kjellconnelly/react-native-musicplayercontroller/master/example/picker_ios.gif "MPMediaPickerController - iOS")\r\n\r\n###### Intent.ACTION_PICK - Android\r\n![alt text](https://raw.githubusercontent.com/kjellconnelly/react-native-musicplayercontroller/master/example/picker_android.gif "Intent.ACTION_PICK - Android")\r\n\r\n###### input type=\'file\' - web\r\n![alt text](https://raw.githubusercontent.com/kjellconnelly/react-native-musicplayercontroller/master/example/picker_web.gif "<input type=\'file\' /> - web")\r\n\r\n*note* that the first argument is false. This has to do with the web version only (unused variable on iOS and Android, but we still put it there so we don\'t have different code calls). It has to do with whether you want to save the sound file locally. Due to web restrictions, we can\'t save a link to the file the user selected between page refreshes. So we need to make a local copy of the music file and save it to local storage. Since local storage is fairly small on most browsers (usually 5MB), we wouldn\'t want to save it if we plan to use local storage for anything else, or have users pick files that are larger than 5MB. So this is optional. On iOS and Android, we actually can save a link. So the memory usage is pretty much no existant. \r\n\r\nB) Once the user has an actual track/playlist chosen, you can access this always, even when the user closes and reopens your app. But you need to preload the music so the player is cached. If you just call the playMusic method, and music hasn\'t been preloaded, it will fail.\r\n```javascript\r\nMusicPlayerController.preloadMusic("all", (metadata)=>{\r\n  // Successful preload\r\n}, ()=>{\r\n  // Failed to preload music. Potentially lots of reasons, such as the music file being removed from the device.\r\n})\r\n```\r\nNote that the first argument is a String. This has to do with the repeatMode. Valid values are:\r\n```javascript\r\n"none", // plays the song or playlist once, and doesn\'t repeat\r\n"one", // plays the current song on repeat (or if it\'s a playlist, just the currently selected song)\r\n"all", // plays all tracks on repeat (for a playlist, or a single track)\r\n"default" // The userâ€™s preferred repeat mode. Currently, we always use the applicationMusicPlayer, so whatever Apple set as being the default repeat mode, that will happen. I\'m not sure which one it uses though, so avoid picking this unless you know for sure what it does.\r\n```\r\n\r\nC) Now you can play music:\r\n```javascript\r\nMusicPlayerController.playMusic(()=>{\r\n    // Successfully playing\r\n}, ()=>{\r\n    // Failed to play\r\n})\r\n```\r\n\r\nD) Or pause music...\r\n```javascript\r\nMusicPlayerController.pauseMusic(()=>{\r\n  // pausing music\r\n}, ()=> {\r\n  // failed to pause\r\n})\r\n```\r\n\r\nE) Or stop music\r\n```javascript\r\nMusicPlayerController.stopMusic(()=>{\r\n  // music stopped\r\n}, ()=> {\r\n  // failed to stop music\r\n})\r\n```\r\n\r\nF) Or check if music is playing \r\n```javascript\r\nMusicPlayerController.isPlaying(()=>{\r\n  // music is playing\r\n}, ()=> {\r\n  // music is not playing\r\n})\r\n```\r\n\r\nG) And for Android, you need to ask for permission. This method checks for permission, and gives you 3 different callbacks for different situations. The first two aruments are for a popup that explains to the user why permission is required... The first argument is Title. Second is message:\r\n```javascript\r\nMusicPlayerController.requestPermission("Permission Required",\r\n"We need permission to play audio files from your storage. If you decline, you can always toggle this in Settings.",\r\n()=> { // User just tapped to Accept\r\n    this.presentPicker() // method defined somewhere else that does MusicPlayerController.presentPicker(...)\r\n}, ()=> { // User has already accepted\r\n    this.presentPicker()\r\n}, ()=> {\r\n    alert("Without permission to play audio files, we can only play the default music. If you want to change this, you can change this in your device Settings.")\r\n})\r\n```\r\n\r\n\r\n**WE RECOMMEND FOR CROSS PLATFORM APPS**\r\nAlways do part G if your app uses Android. You can have all the same logic for iOS and Web since we\'ll simply always call the \'User has already accepted\' callback. If you need to handle UI or have some other logic for Android Permissions, check out React Native\'s APIs: Permissions Android. The specific permission we use here is: ```READ_EXTERNAL_STORAGE``` (java), which is aka ```PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE``` (for React-Native)\r\n\r\nIf your app doesn\'t use Android, you won\'t need this.\r\n\r\n\r\n\r\n## TODO:\r\n1. ~~Setup Test Repo and integrate with current project~~\r\n2. ~~Write iOS Version~~ Initial Complete\r\n3. ~~Write Web Version~~ Initial Complete\r\n4. ~~Hope someone writes the Android version~~ No one did\r\n5. ~~Possibly write the Android version~~ Initial Complete\r\n6. ~~Fix bugs & increase functionality for all platforms as needed~~ version 1.0 released\r\n7. Will update as needed, but works perfectly for the cross platform app I am currently working on.\r\n\r\n\r\n## License\r\n*MIT*\r\n\r\n## My Tools\r\nI\'m not sure how to add needed dependencies, but this module currently works with React-Native 0.41, and your app needs to be able to use ES6 syntax. React-Native will load the correct .ios.js or .android.js. If you\'re using react-native-web, you it will load from .web.js. So make sure your packaging tool (I use webpack) is set to load .web.js files:\r\n\r\n```javascript\r\n// webpack.config.js\r\n\r\nmodule.exports = {\r\n    // ...\r\n    resolve: {\r\n        extensions: [ \'.web.js\', \'.js\' ]\r\n    }\r\n};\r\n```\r\n\r\n#### iOS\r\nShould work for iOS 8.0+ (devices from late 2014 or later). Only physically tested on iOS 10.2\r\n\r\n#### Android\r\nWorks for all React-Native Projects (Marshmallow and above).\r\n\r\n#### Web\r\nShould work for all modern browsers, though users can only select mp3, ogg, and wav files. Who uses ogg and wav anyways?  \r\n  1. Chrome 4.0 (2010)  \r\n  2. IE 9.0 (2011, mp3 only)  \r\n  3. Firefox (2009)  \r\n  4. Safari (2009, mp3 and wav only)  \r\n  5. Opera (2007)  \r\n  6. Edge (2016)  \r\n  \r\nAlso works on Mobile Browsers  \r\n  1. iOS Safari & Chrome (2016)  \r\n  2. Android Browser (2013)  \r\n  3. Android Chrome (2017)  \r\n  \r\n## Known Issues\r\n*Web Issues*  \r\n  1. Due to web restrictions, we can\'t save a link to the audio file selected beyond browser refreshes. So in order to compensate, you can choose to either save the entire audio file to local storage (which has a 5-10 mb maximum), or not save it. Saving on other platforms just saves the link.  \r\n\r\n**Note that as of the current version, this bool is irrelevent, as both ```true``` and ```false``` will not save to Local Storage (this is because my project doesn\'t need it, but I might add this functionality some day if someone needs it, or I do). Nevertheless, you still need to include it.**  \r\n  2. If opens the Picker dialog, and clicks cancel without selecting an audio file, your cancelHandler won\'t be called. But if they select a file, and the successHandler is called, then open the Picker dialog again, and click cancel, the cancelHandler will be called. Weird web issues...  \r\n  3. Audio is played using the ```<audio />``` tag. This means that users can only use mp3, wav, and ogg files. We recommend mp3 since they work on all browsers, while the others vary.  \r\n  4. ```repeatMode``` was originally created for iOS. We\'re setting ```\'none\'``` has non repeating (plays once), and all other values as repeating forever. This is because you cannot select a playlist, but only an audio file.  \r\n  5. I\'m not sure how to get actual metadata from a mp3 or wav, so for ```metadata```, it will only hold one key: ```title```, which is the audio file name.  \r\n\r\n*Android Issues*  \r\n  1. Unlike iOS and Web, you need to user permission to access files (even the ones they pick). Similar to how on iOS, you need permission to access the Microphone. Though the API is the same for iOS, Android, and Web, there is one method that really only needs to be called if you are using Android: requestPermission. If you call this on other platforms, it just runs the \'permission already accepted\' handler.  \r\n  2. I\'m not exactly sure why the picker slides the current Activity away first as in the example gif. But that\'s only if you have a new Activity (ViewController basically) ontop of your main one.  \r\n  3. Technically speaking, when you call the stopMusic function, music is actually paused, and after a slight delay, moves to time 0. This is a 100ms delay. I added this here because using the Java API, pausing and seeking to time 0 would seek before fully pausing. And the stop method made me need to prepare the MediaPlayer again. So it will be in the paused state if you go into the Java side of things.  \r\n  4. Since Android lets you pick files you may have randomly put on your device, you may end up with audio files that do not have very good metadata. In this case, if there is no title attributed to the metadata, we will return the filename instead (similar to the web version).  \r\n\r\n## Common Debugging Issues\r\n\r\n##### If you just downloaded the new version of this package...\r\nOpen your app\'s package.json file and make sure under dependencies, react-native-musicplayercontroller has a version number you\'re okay with. I like to do: ```"react-native-musicplayercontroller": "*"``` because it always prioritizes the latest version. Then:\r\n```\r\nnpm update react-native-musicplayercontroller\r\n```\r\n... then you will want to restart the React-Native server. So kill that process in your terminal and restart it:\r\n```\r\nreact-native start\r\n```\r\nAnd of course, rebuild the actual app (Xcode > Build & Run, or ```react-native run-ios```)\r\n\r\n##### If you\'re testing on simulator\r\n\r\nUnfortunately MPMediaPickerController doesn\'t work on the iOS Simulator. So you just get an alert if you try to open the Picker. And since you can\'t pick an item, playing them won\'t work either because you won\'t have anything selected.\r\n\r\n##### The picker pops up on iOS, and instantly pops off\r\n\r\nAs of iOS 10.something, there is a new privacy setting that you need to fill in. The first time you call the presentPicker method, the picker\'s ViewController will popup, and an alert will appear with your handwritten description of why you need access to their music library. If you don\'t have a NSAppleMusicUsageDescription if your info.plist file, the picker will slide off the page as soon as it slides in.\r\n\r\nOpen your Xcode project, and open your info.plist file. By default, it opens as a Property List. If you right-click the file, you can click Open As > Source Code. Then paste in the following (editing the string tag of course). If you are unfamiliar with the source code format, it should make sense as there is an obvious pattern of <key></key> followed by its <value></value>. You\'re just adding one of these where the value is of type string.\r\n\r\n```\r\n<key>NSAppleMusicUsageDescription</key>\r\n<string>Fill in a description here that you want your users to see to explain why you need access to their Music Library</string>\r\n```\r\n\r\n##### Types of metadata?\r\n\r\nI was lazy and didn\'t include all types of metadata... just the ones I personally want:\r\n ```objc\r\n @"artist" : item.artist,\r\n @"title" : item.title,\r\n @"albumTitle" : item.albumTitle,\r\n @"playbackDuration" : @(item.playbackDuration)\r\n ```\r\nOh, and web only has ```title```, which actually shows the filename. Android returns filename too if there is no title in the actual metadata.\r\n\r\n##### I can\'t do...\r\n\r\nI know, I know. There\'s a lot that may be difficult to do with this module as of now. But it allows for the situation where you want a user to be able to select some music from their own library, and play is back within your own app. And that\'s my focus for now. Please ask any questions or ask for a feature and I\'ll see what I can do.\r\n\r\nStar this project if you like it! It\'s good feedback that someone likes what I\'ve built. And thanks for reading this!\r\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '641304025d5695f806be1ef04eee9cb22e4ee31b',
21 silly publish   _id: 'react-native-musicplayercontroller@1.0.0',
21 silly publish   _shasum: '8c6834f11c4ba75b0d8a94803e2e87b6a5d37ddc',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name react-native-musicplayercontroller
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'react-native-musicplayercontroller',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'react-native-musicplayercontroller',
26 silly mapToRegistry   name: 'react-native-musicplayercontroller',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/react-native-musicplayercontroller
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/Developer/.npm/react-native-musicplayercontroller/1.0.0/package.tgz
30 verbose request uri https://registry.npmjs.org/react-native-musicplayercontroller
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 3:30:09 PM
33 verbose request using bearer token for auth
34 verbose request id 8f97f8e0fa46a3ab
35 http request PUT https://registry.npmjs.org/react-native-musicplayercontroller
36 http 403 https://registry.npmjs.org/react-native-musicplayercontroller
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Thu, 13 Apr 2017 22:30:10 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-sea1038-SEA',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1492122610.921890,VS0,VE405',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/Developer/.npm/registry.npmjs.org/react-native-musicplayercontroller on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : react-native-musicplayercontroller
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1044:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:965:12)
41 verbose statusCode 403
42 verbose pkgid react-native-musicplayercontroller
43 verbose cwd /Users/Developer/Desktop/My_GithubProjects/react-native-musicplayercontroller
44 error Darwin 16.0.0
45 error argv "/usr/local/Cellar/node/6.8.0/bin/node" "/usr/local/bin/npm" "publish"
46 error node v6.8.0
47 error npm  v3.10.8
48 error code E403
49 error "You cannot publish over the previously published version 1.0.0." : react-native-musicplayercontroller
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
